package com.ludumdare{		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.KeyboardEvent;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		public class Player extends MovieClip	{						private var isRight:Boolean=false;		private var isLeft:Boolean=false;		public var currentSpeed:Number=0;		private var maxSpeed:Number=1;		private var accel:Number=0.1;				private var jump:Boolean=false;		private var isJumping:Boolean=false;		private var currentJumpSpeed:Number=0;		private var maxJumpSpeed:Number=3;		private var jumpAccel:Number=0.1;		private var floatingPointThreshold:Number=0.15;				public var disabled=false;				private var ground:Number;				private var jumpSFX:sfxJump = new sfxJump();		private var sfxSoundChannel:SoundChannel = new SoundChannel();		private var sfxSoundTransform:SoundTransform = new SoundTransform(0.5,0);				public function Player()		{			super();			this.addEventListener(Event.ADDED_TO_STAGE, addedToStage);			this.addEventListener(Event.ENTER_FRAME, update);						ground=this.model.y;					}				private function update(e:Event):void{			if(disabled) return;			// if right is pressed and speed didnt hit the limit, increase speed			if(isRight && currentSpeed<maxSpeed){				currentSpeed=maxSpeed;			}			// if left is pressed and speed didnt hit the limit, increase speed (the other way)			if(isLeft && currentSpeed>-maxSpeed){				currentSpeed-=maxSpeed;			}			// if speed is more than 0, decrease			if(currentSpeed>0){				currentSpeed-=accel;			}			// if speed is less than 0, increase			if(currentSpeed<0){				currentSpeed+=accel;			}						if(Math.abs(currentSpeed)<accel){				currentSpeed=0;						}						// apply speed to movieclip			this.rotation+=currentSpeed;									if(jump && currentJumpSpeed<maxJumpSpeed && !isJumping){				currentJumpSpeed=maxJumpSpeed;				isJumping=true;				sfxSoundChannel = jumpSFX.play();			}			if(this.model.y>=ground-floatingPointThreshold && isJumping){				currentJumpSpeed-=jumpAccel;			}else if(isJumping){				currentJumpSpeed=0;				this.model.y=ground;				isJumping=false;			}			this.model.y+=currentJumpSpeed;		}				private function addedToStage(e:Event):void{			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			stage.stageFocusRect = false;			stage.focus = this;							}				public function keyDownHandler(e:KeyboardEvent):void{			//trace(e.keyCode);			switch(e.keyCode){				case 68: //d					//this.rotation+=moveSpeed;					isRight=true;					break;				case 65: //a					isLeft=true;					break;				case 32:					jump=true;					break;				default:					break;			}					}				public function keyUpHandler(e:KeyboardEvent):void{			//trace(e.keyCode);			switch(e.keyCode){				case 68: //d					//this.rotation+=moveSpeed;					isRight=false;					break;				case 65: //a					isLeft=false;					break;				case 32:					jump=false;					break;				default:					break;			}		}	}}